{"ast":null,"code":"var _jsxFileName = \"D:\\\\NavPlaces\\\\src\\\\contexts\\\\ThemeContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ThemeContext = /*#__PURE__*/createContext(undefined);\nexport const ThemeProvider = ({\n  children\n}) => {\n  _s();\n  const [theme, setThemeState] = useState(() => {\n    // Check localStorage first\n    const savedTheme = localStorage.getItem('navplace-theme');\n    if (savedTheme && (savedTheme === 'light' || savedTheme === 'dark')) {\n      return savedTheme;\n    }\n\n    // Check system preference\n    if (window.matchMedia && window.matchMedia('(prefers-color-scheme: light)').matches) {\n      return 'light';\n    }\n\n    // Default to dark theme\n    return 'dark';\n  });\n  const setTheme = newTheme => {\n    setThemeState(newTheme);\n    localStorage.setItem('navplace-theme', newTheme);\n    document.documentElement.setAttribute('data-theme', newTheme);\n  };\n  const toggleTheme = () => {\n    const newTheme = theme === 'light' ? 'dark' : 'light';\n    setTheme(newTheme);\n  };\n  useEffect(() => {\n    // Set initial theme\n    document.documentElement.setAttribute('data-theme', theme);\n\n    // Listen for system theme changes\n    const mediaQuery = window.matchMedia('(prefers-color-scheme: light)');\n    const handleChange = e => {\n      if (!localStorage.getItem('navplace-theme')) {\n        setTheme(e.matches ? 'light' : 'dark');\n      }\n    };\n    mediaQuery.addEventListener('change', handleChange);\n    return () => mediaQuery.removeEventListener('change', handleChange);\n  }, [theme]);\n  const value = {\n    theme,\n    toggleTheme,\n    setTheme\n  };\n  return /*#__PURE__*/_jsxDEV(ThemeContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 68,\n    columnNumber: 5\n  }, this);\n};\n_s(ThemeProvider, \"YlyEW6vu9P2MBNmBJZSbxh+DCzc=\");\n_c = ThemeProvider;\nexport const useTheme = () => {\n  _s2();\n  const context = useContext(ThemeContext);\n  if (context === undefined) {\n    throw new Error('useTheme must be used within a ThemeProvider');\n  }\n  return context;\n};\n_s2(useTheme, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"ThemeProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","jsxDEV","_jsxDEV","ThemeContext","undefined","ThemeProvider","children","_s","theme","setThemeState","savedTheme","localStorage","getItem","window","matchMedia","matches","setTheme","newTheme","setItem","document","documentElement","setAttribute","toggleTheme","mediaQuery","handleChange","e","addEventListener","removeEventListener","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","useTheme","_s2","context","Error","$RefreshReg$"],"sources":["D:/NavPlaces/src/contexts/ThemeContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect, ReactNode } from 'react';\r\n\r\ntype Theme = 'light' | 'dark';\r\n\r\ninterface ThemeContextType {\r\n  theme: Theme;\r\n  toggleTheme: () => void;\r\n  setTheme: (theme: Theme) => void;\r\n}\r\n\r\nconst ThemeContext = createContext<ThemeContextType | undefined>(undefined);\r\n\r\ninterface ThemeProviderProps {\r\n  children: ReactNode;\r\n}\r\n\r\nexport const ThemeProvider: React.FC<ThemeProviderProps> = ({ children }) => {\r\n  const [theme, setThemeState] = useState<Theme>(() => {\r\n    // Check localStorage first\r\n    const savedTheme = localStorage.getItem('navplace-theme') as Theme;\r\n    if (savedTheme && (savedTheme === 'light' || savedTheme === 'dark')) {\r\n      return savedTheme;\r\n    }\r\n    \r\n    // Check system preference\r\n    if (window.matchMedia && window.matchMedia('(prefers-color-scheme: light)').matches) {\r\n      return 'light';\r\n    }\r\n    \r\n    // Default to dark theme\r\n    return 'dark';\r\n  });\r\n\r\n  const setTheme = (newTheme: Theme) => {\r\n    setThemeState(newTheme);\r\n    localStorage.setItem('navplace-theme', newTheme);\r\n    document.documentElement.setAttribute('data-theme', newTheme);\r\n  };\r\n\r\n  const toggleTheme = () => {\r\n    const newTheme = theme === 'light' ? 'dark' : 'light';\r\n    setTheme(newTheme);\r\n  };\r\n\r\n  useEffect(() => {\r\n    // Set initial theme\r\n    document.documentElement.setAttribute('data-theme', theme);\r\n    \r\n    // Listen for system theme changes\r\n    const mediaQuery = window.matchMedia('(prefers-color-scheme: light)');\r\n    const handleChange = (e: MediaQueryListEvent) => {\r\n      if (!localStorage.getItem('navplace-theme')) {\r\n        setTheme(e.matches ? 'light' : 'dark');\r\n      }\r\n    };\r\n\r\n    mediaQuery.addEventListener('change', handleChange);\r\n    return () => mediaQuery.removeEventListener('change', handleChange);\r\n  }, [theme]);\r\n\r\n  const value = {\r\n    theme,\r\n    toggleTheme,\r\n    setTheme,\r\n  };\r\n\r\n  return (\r\n    <ThemeContext.Provider value={value}>\r\n      {children}\r\n    </ThemeContext.Provider>\r\n  );\r\n};\r\n\r\nexport const useTheme = (): ThemeContextType => {\r\n  const context = useContext(ThemeContext);\r\n  if (context === undefined) {\r\n    throw new Error('useTheme must be used within a ThemeProvider');\r\n  }\r\n  return context;\r\n}; "],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,UAAU,EAAEC,QAAQ,EAAEC,SAAS,QAAmB,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAUzF,MAAMC,YAAY,gBAAGN,aAAa,CAA+BO,SAAS,CAAC;AAM3E,OAAO,MAAMC,aAA2C,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAC3E,MAAM,CAACC,KAAK,EAAEC,aAAa,CAAC,GAAGV,QAAQ,CAAQ,MAAM;IACnD;IACA,MAAMW,UAAU,GAAGC,YAAY,CAACC,OAAO,CAAC,gBAAgB,CAAU;IAClE,IAAIF,UAAU,KAAKA,UAAU,KAAK,OAAO,IAAIA,UAAU,KAAK,MAAM,CAAC,EAAE;MACnE,OAAOA,UAAU;IACnB;;IAEA;IACA,IAAIG,MAAM,CAACC,UAAU,IAAID,MAAM,CAACC,UAAU,CAAC,+BAA+B,CAAC,CAACC,OAAO,EAAE;MACnF,OAAO,OAAO;IAChB;;IAEA;IACA,OAAO,MAAM;EACf,CAAC,CAAC;EAEF,MAAMC,QAAQ,GAAIC,QAAe,IAAK;IACpCR,aAAa,CAACQ,QAAQ,CAAC;IACvBN,YAAY,CAACO,OAAO,CAAC,gBAAgB,EAAED,QAAQ,CAAC;IAChDE,QAAQ,CAACC,eAAe,CAACC,YAAY,CAAC,YAAY,EAAEJ,QAAQ,CAAC;EAC/D,CAAC;EAED,MAAMK,WAAW,GAAGA,CAAA,KAAM;IACxB,MAAML,QAAQ,GAAGT,KAAK,KAAK,OAAO,GAAG,MAAM,GAAG,OAAO;IACrDQ,QAAQ,CAACC,QAAQ,CAAC;EACpB,CAAC;EAEDjB,SAAS,CAAC,MAAM;IACd;IACAmB,QAAQ,CAACC,eAAe,CAACC,YAAY,CAAC,YAAY,EAAEb,KAAK,CAAC;;IAE1D;IACA,MAAMe,UAAU,GAAGV,MAAM,CAACC,UAAU,CAAC,+BAA+B,CAAC;IACrE,MAAMU,YAAY,GAAIC,CAAsB,IAAK;MAC/C,IAAI,CAACd,YAAY,CAACC,OAAO,CAAC,gBAAgB,CAAC,EAAE;QAC3CI,QAAQ,CAACS,CAAC,CAACV,OAAO,GAAG,OAAO,GAAG,MAAM,CAAC;MACxC;IACF,CAAC;IAEDQ,UAAU,CAACG,gBAAgB,CAAC,QAAQ,EAAEF,YAAY,CAAC;IACnD,OAAO,MAAMD,UAAU,CAACI,mBAAmB,CAAC,QAAQ,EAAEH,YAAY,CAAC;EACrE,CAAC,EAAE,CAAChB,KAAK,CAAC,CAAC;EAEX,MAAMoB,KAAK,GAAG;IACZpB,KAAK;IACLc,WAAW;IACXN;EACF,CAAC;EAED,oBACEd,OAAA,CAACC,YAAY,CAAC0B,QAAQ;IAACD,KAAK,EAAEA,KAAM;IAAAtB,QAAA,EACjCA;EAAQ;IAAAwB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACY,CAAC;AAE5B,CAAC;AAAC1B,EAAA,CAvDWF,aAA2C;AAAA6B,EAAA,GAA3C7B,aAA2C;AAyDxD,OAAO,MAAM8B,QAAQ,GAAGA,CAAA,KAAwB;EAAAC,GAAA;EAC9C,MAAMC,OAAO,GAAGvC,UAAU,CAACK,YAAY,CAAC;EACxC,IAAIkC,OAAO,KAAKjC,SAAS,EAAE;IACzB,MAAM,IAAIkC,KAAK,CAAC,8CAA8C,CAAC;EACjE;EACA,OAAOD,OAAO;AAChB,CAAC;AAACD,GAAA,CANWD,QAAQ;AAAA,IAAAD,EAAA;AAAAK,YAAA,CAAAL,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}